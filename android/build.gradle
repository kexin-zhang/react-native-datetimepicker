buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:3.1.4")
    }
}

apply(plugin: "com.android.library")
apply(plugin: "maven")

def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

android {
    compileSdkVersion safeExtGet('compileSdkVersion', 26)
    buildToolsVersion safeExtGet('buildToolsVersion', '26.0.3')

    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', 16)
        targetSdkVersion safeExtGet('targetSdkVersion', 26)
        versionCode 1
        versionName "1.0"
    }
    lintOptions {
        abortOnError false
    }
}

repositories {
    google()
    jcenter()
}

dependencies {
  implementation "com.facebook.react:react-native:${safeExtGet('reactNativeVersion', '+')}" // From node_modules
}

def configureReactNativePom(def pom) {
  def packageJson = new groovy.json.JsonSlurper().parseText(file('../package.json').text)

  pom.project {
    name "React Native DatetimePicker"
    artifactId packageJson.name
    version = packageJson.version
    group = "com.reactcommunity.rndatetimepicker"
    description packageJson.description
    url packageJson.repository.baseUrl

    licenses {
      license {
        name packageJson.license
        url 'https://github.com/react-native-community/react-native-datetimepicker/blob/master/LICENSE.md'
        distribution 'repo'
      }
    }

    developers {
      developer {
        id 'swaagie'
        name packageJson.author
      }
    }
  }
}

afterEvaluate { project ->

  task androidJavadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += files(android.bootClasspath)
    classpath += files(project.getConfigurations().getByName('compile').asList())
    include '**/*.java'
  }

  task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
    classifier = 'javadoc'
    from androidJavadoc.destinationDir
  }

  task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
    include '**/*.java'
  }

  android.libraryVariants.all { variant ->
    def name = variant.name.capitalize()
    task "jar${name}"(type: Jar, dependsOn: variant.javaCompile) {
      from variant.javaCompile.destinationDir
    }
  }

  artifacts {
    archives androidSourcesJar
    archives androidJavadocJar
  }

  task installArchives(type: Upload) {
    configuration = configurations.archives
    repositories.mavenDeployer {
      // Deploy to react-native-event-bridge/maven, ready to publish to npm
      repository url: "file://${projectDir}/../android/maven"

      configureReactNativePom pom
    }
  }
}
